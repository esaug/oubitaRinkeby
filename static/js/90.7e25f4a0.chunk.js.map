{"version":3,"file":"static/js/90.7e25f4a0.chunk.js","mappings":"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","sources":["componets/MintButton.jsx","componets/popUps/popUpLoading.jsx","componets/Mint.jsx"],"sourcesContent":["import { useState } from 'react';\nimport {ReactComponent as Arrow} from '../assets/arrow.svg'\nimport store from '../utils/store/reducers'\nimport { useSelector} from 'react-redux'\n\nexport const coinState = {\n    name : 'ETH',\n\n}\n\nconst buttonValueState = {\n    value: 'ETH',\n}\n\nconst MintButton = ({datos,stylesCss,caso, popup, closepopup,functions, buttonPrice, popUpUniversal}) => {\n\n    const [openMenu, setOpenMenu] = useState(false);\n    const [buttonName, setButtonName] = useState(coinState)\n    const [buttonValue, setButtonValue] = useState(buttonValueState)\n    \n    const blockchain = useSelector((store)=> store.blockchain)\n\n    const prices = [buttonPrice.priceETH, buttonPrice.priceMatic]\n\n    const handleMenu = (i)=> {\n        setOpenMenu(i)\n        if (openMenu === i )setOpenMenu(false)\n    }\n\n\n    return ( <>\n    <div className=\"botones_mint\">\n            <button className='boton --boton__mint --botonNFT'\n            onClick={()=>{\n                \n                if(blockchain.account && buttonValue.value == 'ETH'){\n                    \n                    functions.minter(1, blockchain.account)\n                    popup({\n                        bool: true,\n                        mensaje: 'LOADING...'\n                    })\n                }else if(blockchain.account && buttonValue.value == 'MATIC'){\n                    \n                    functions.allowance(blockchain.account)\n                    popup({\n                        bool: true,\n                        mensaje: 'LOADING...'\n                    })\n                }else{\n                    \n                    popup({\n                        bool: true,\n                        mensaje: 'Connect your Metamask'\n                    })\n                    closepopup()\n                }\n            }}\n            >MINT NFT</button>\n            {caso ? datos.map((e,i)=>{\n            return (    \n                <div key={i} className={stylesCss} >\n                    <div className={openMenu !==i ? \"menuComponet__header --borderRadio\" : 'menuComponet__header '} onClick={()=>{handleMenu(i)}}>\n                        <div className='menuComponet__title'> {buttonName.price}{buttonName.name}</div>\n                        {popUpUniversal.bool == false ? (   \n                                <div className={openMenu !==i  ? \" menuComponet__arrow --arrow-down\" : 'menuComponet__arrow'}><Arrow/></div>\n                        \n                        ) : ('')}\n                    </div>\n                    <div className={openMenu ===i ? 'menuComponet__body --active ' : 'menuComponet__body --disable'}>\n                        {e.content.map((b,y)=><button key={y} value={b} className='button_mint'onClick={(e)=>{\n                            if(e.target.value == 'ETH'){\n                                \n                                setButtonName({\n                                    name:' ETH',\n                                    price : buttonPrice.priceETH\n                                })\n                                setButtonValue({\n                                    value: 'ETH',\n                                })\n                                setOpenMenu(false)\n                            }else {\n                                setButtonName({\n                                    name:' MATIC',\n                                    price:buttonPrice.priceMatic\n                                })\n                                setButtonValue({\n                                    value:'MATIC',\n                                })\n                                setOpenMenu(false)\n                            } \n                        }} > {prices[y]} {b}</button>)}\n                    </div>\n                </div>\n            )\n        })\n        :\n        datos.map((e,i)=>{\n            return (\n                <div key={i} className={stylesCss} >\n                    <div className='menuComponet__header' onClick={()=>{handleMenu(i)}}>\n                        <div className='menuComponet__title'>{e.name}</div>\n                        <div className={openMenu !==i ? \" menuComponet__arrow --arrow-down\" : 'menuComponet__arrow'}><Arrow/></div>\n                    </div>\n                    <div className={openMenu ===i ? 'menuComponet__body --active ' : 'menuComponet__body --disable'}>\n                        <p className='menuComponet__body__text'>{e.content}</p>\n                    </div>\n                </div>\n            )\n        })\n        }\n        </div>\n        </> );\n}\n\nexport default MintButton;","import React from 'react'\n\nfunction PopUpLoading (props)  {\n\n\n\nreturn (props.trigger) ? (\n        <div className='mint_popup'>\n            <div className='mint_popup_innner'>\n                \n                {props.children}\n            </div>\n        </div>\n        \n        ) : \"\";\n    \n}\n\nexport default PopUpLoading\n","import banner from '../assets/png/nfta-banner.png'\nimport iconFooter from '../assets/gif/Fuego-en-movimiento-small-compri.gif'\nimport mancha1 from \"../assets/png/capa1.png\"\nimport mancha2 from \"../assets/png/capa2.png\"\nimport MenuOpciones1 from './MenuOpciones1'\nimport popUpImg from \"../assets/png/popUp.png\"\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ContractFactory, ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport { useNavigate } from \"react-router-dom\";\nimport MintButton from './MintButton'\nimport ContratoNFT from'../contracts/abi.json'\nimport axios from 'axios'\nimport Decimal from 'decimal.js-light'\n//Popups\nimport PopUpLoading from './popUps/popUpLoading'\n\n\nconst coins = [\n  {\n    name: 'ETH',\n    content : [\n      `ETH`,\n      `MATIC`,\n    ]\n  }\n]\n\nconst buttonPriceState = {\n  priceETH:'',\n  priceMatic:'',\n}\n\n\n\nconst Mint = ({ id }) => {\n\n  let popupState= {\n    bool: false,\n    mensaje: '',\n    mensaje2: ''\n  }\n\n  const contractState = {\n    NFT: null,\n    oracle: null\n  }\n\n  let buttonDataState = {\n    priceMatic: null,\n    numberMinted: null,\n    whitelist: null\n  }\n\n  let precioToken ={\n    precio: null\n  }\n\n  let navigate = useNavigate()\n  \n  const [popUpUniversal, setPopUpUniversal] = useState(popupState)\n  const [buttonPrice, setButtonPrice] = useState(buttonPriceState)\n  const [contract, setContract] = useState(contractState)\n  const [buttonData, setButtonData] = useState(buttonDataState)\n  const [price, setPrice] = useState(precioToken)\n  \n\n  const blockchain = useSelector((store)=> store.blockchain)\n\n  const fetchingCoin = async(_contract)=>{\n\n    const contractAddress = '0x74516C8C2987Ef15E691B8A3c5C715158a35315E'\n    const Provider = await new ethers.providers.Web3Provider(window.ethereum)\n    const signer = await Provider.getSigner()\n    const _NftContract = await new ethers.Contract(contractAddress, ContratoNFT, signer)\n\n    const fetched = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=matic-network&vs_currencies=eth')\n\n    // Numero de tokens minteados \n    const maticPrice = null\n    const mintedNFT = null\n    const white = null\n\n    const txCounter = _NftContract.counter()\n    .then((resp)=>{\n      const numberOfNFTMinted = parseInt(resp)\n    \n    const txWhitelist = _NftContract.onlyWhitelisted()\n    .then((resp)=>{\n      setButtonData({\n        priceMatic: fetched.data['matic-network'].eth,\n        numberMinted: numberOfNFTMinted,\n        whitelist: resp\n      })\n    })\n\n    })     \n    setContract({\n      NFT:_NftContract\n    })\n  }\n\n\n  // Close Popup\n\n  const closePop = ()=>{\n    setTimeout(()=>{\n      setPopUpUniversal({\n        bool: false,\n        mensaje: ''\n      })\n    }, 1000 * 5)\n  }\n\n  const nextPage = ()=>{\n    setTimeout(()=>{\n      navigate(\"/profile\")\n    }, 1000 * 5)\n  }\n\n  // BLOCKCHAIN \n\n  const _spender = '0x74516C8C2987Ef15E691B8A3c5C715158a35315E'\n  const _amount = '1000000000000000000000000'\n\n\nconst allowance = async (_account)=>{\n  const taxB = await blockchain.contratoTok.allowance(_account, _spender)\n  .then((resp)=>{\n  \n    const respuesta = Number(resp._hex).toLocaleString('fullwide', { useGrouping: false })\n    \n    if(respuesta < 30000000000000000000){\n      const minteo = ()=>{\n        const txC =  approve( 2, _account)\n      }\n      minteo()\n  } else{\n      minter(2, _account)  \n  } \n  })\n}\n\nconst approve = async ( _option, _account)=>{\n\n  try {\n    const txA = await blockchain. contratoTok.approve( _spender, _amount)\n  await txA.wait().then((resp)=>{\n    \n      if(txA){\n        setPopUpUniversal({\n          bool: false,\n          mensaje: ''\n        })\n        \n        minter( _option, _account)\n        \n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'LOADING...'\n        })\n      }\n    }\n  ) \n  } catch (error) {\n    setPopUpUniversal({\n      bool: true,\n      mensaje: 'The transaction has been cancel'\n    })\n    closePop()\n  }\n}\n\n// SET BOTON PRICE \n\nconst button = ()=>{\n    \n  let{numberMinted} = buttonData\n  let {priceMatic} = buttonData\n  let {whitelist} = buttonData\n  let price_Matic = Number(priceMatic)\n  let eth_price, result_matic, result, final_result\n\n\n  if(whitelist == true){\n    \n    if(price_Matic == 0 ){\n      \n    } else {\n      eth_price = new Decimal(0.02)\n      result_matic = new Decimal(price_Matic)\n      result = eth_price.dividedBy(result_matic).toString()\n      final_result = Number(result).toFixed(2)\n  \n      \n\n      setButtonPrice({\n        priceETH : '0,02',\n        priceMatic: final_result \n      })\n\n      setPrice({\n        precio: final_result * 10 ** 18\n      })\n\n      \n    }\n  }else if (whitelist == false) {\n    \n    if(price_Matic == 0 ){\n      \n    } else {\n      eth_price = new Decimal(0.15)\n      result_matic = new Decimal(price_Matic)\n      result = eth_price.dividedBy(result_matic).toString()\n      final_result = Number(result).toFixed(2)\n      \n\n      setButtonPrice({\n        priceETH : '0,15',\n        priceMatic: final_result\n      })\n\n      setPrice({\n        precio: final_result * 10 ** 18\n      })\n    }\n  } else if (numberMinted >= 25) {\n    \n    if(price_Matic == 0 ){\n      \n    } else {\n      eth_price = new Decimal(0.2)\n      result_matic = new Decimal(price_Matic)\n      result = eth_price.dividedBy(result_matic).toString()\n      final_result = Number(result).toFixed(2)\n\n\n      setButtonPrice({\n        priceETH : '0,2',\n        priceMatic: final_result  \n      })\n\n      setPrice({\n        precio: final_result * 10 ** 18\n      })\n\n    }\n  \n  }else {\n    \n  }\n}\n\n// MINTER FUNCTION\n\nconst minter = async(_option,_account)=>{\n\n\n  const tx1 = await blockchain.contracNFT.onlyWhitelisted()\n  const tx2 = await blockchain.contracNFT.counter()\n  const counter = parseInt(tx2, 18)\n  \n  try{\n\n    if(tx1 == true && _option == 1 && counter < 20 ){\n        \n      const options1 = {\n        from: _account,\n        value: 200000000000000\n      }\n        \n    \n      const tx = await blockchain.contracNFT.mint(_option, 1, 200000000000000, options1)\n      await tx.wait().then((resp)=>{\n        if(tx){    \n              \n          setPopUpUniversal({\n            bool: true,\n            mensaje: 'Minted!',\n            mensaje2: 'your NFT has been minted'\n          })\n          closePop()\n          nextPage()\n        }\n      })\n    }else if(tx1 == true && _option == 2 && counter < 20){\n\n        const tx = await blockchain.contracNFT.mint(_option, 1, price.precio.toString())\n        await tx.wait().then((resp)=>{\n          \n          if(tx){\n            \n            setPopUpUniversal({\n              bool: true,\n              mensaje: 'Minted!',\n              mensaje2: 'your NFT has been minted'\n            })\n              closePop()\n              nextPage()\n          }\n        })\n    }else if(tx1 == false && _option == 1 && counter < 20){\n      \n        const options2 = {\n        from: _account,\n        value: 1500000000000000\n      }\n\n        const tx = await blockchain.contracNFT.mint(_option, 1, 1500000000000000, options2)\n        await tx.wait().then((resp)=>{\n          if(tx){\n              \n            setPopUpUniversal({\n              bool: true,\n              mensaje: 'Minted!',\n              mensaje2: 'your NFT has been minted'\n            })\n            closePop()\n            nextPage()\n          }\n      }) \n    }else if(tx1 == false && _option == 2 && counter < 20){\n\n        const tx = await blockchain.contracNFT.mint(_option , 1, price.precio.toString())\n        await tx.wait().then((resp)=>{\n          \n          if(tx){\n            \n            setPopUpUniversal({\n              bool: true,\n              mensaje: 'Minted!',\n              mensaje2: 'your NFT has been minted'\n            })\n              closePop()\n              nextPage()\n          }\n        })    \n    }else if(counter >= 20 && _option == 1 ){\n        const options3 = {\n          from: _account,\n          value: 2000000000000000\n        }\n        const tx = await blockchain.contracNFT.mint(_option, 1, 2000000000000000, options3 )\n        await tx.wait().then((resp)=>{\n          if(tx){\n            \n            setPopUpUniversal({\n              bool: true,\n              mensaje: 'Minted!',\n              mensaje2: 'your NFT has been minted'\n            })\n            closePop()\n            nextPage()\n          }\n        }) \n    }else {\n        \n        const tx = await blockchain.contracNFT.mint(_option, 1, price.precio.toString())\n        await tx.wait().then((resp)=>{\n          if(tx){          \n            setPopUpUniversal({\n              bool: true,\n              mensaje: 'Minted!',\n              mensaje2: 'your NFT has been minted'\n            })\n            closePop()\n            nextPage()\n          }\n        })\n    }\n\n  }catch (error) {\n    if(error.code == 4001){\n      setPopUpUniversal({\n        bool: true,\n        mensaje: 'The transaction has been cancel'\n      })\n      closePop()\n\n    }else if(error.code == 'INSUFFICIENT_FUNDS'){\n      setPopUpUniversal({\n        bool: true,\n        mensaje: 'Insufficient Funds'\n      })\n      closePop()\n    }else{ \n      setPopUpUniversal({\n        bool: true,\n        mensaje: 'Connect your Metamask'\n      })\n      closePop() \n    }\n  }\n}\n\nconst functions = {\n  minter : (opcion, acc)=>minter(opcion, acc),\n  allowance: (acc)=>allowance(acc)\n}\n\nuseEffect(()=>{\n  button()\n}, [buttonData.numberMinted])\n\n\nuseEffect(()=>{\n        \n  fetchingCoin(contract)\n  const interval = setInterval(()=>{\n    fetchingCoin(contract)\n  }, 1000 * 5)\n\n  return()=>clearInterval(interval)\n}, []) \n\n\n  return (\n    <div className='mint' id={id}>\n       <PopUpLoading trigger={popUpUniversal.bool} settrigger={setPopUpUniversal} >\n              <div className='mint_div'>\n                <div className='mint_div_img'>\n                  <img className='mint_img' src={popUpImg}/>\n                </div>\n                <div className='mint_div_subtitle1'>\n                  <h2 className={popUpUniversal.mensaje == 'The transaction has been cancel' ? 'mint__titulo2' : popUpUniversal.mensaje == 'Insufficient Funds'? 'mint__titulo3':  popUpUniversal.mensaje == 'Connect your Metamask'? 'mint__titulo4': 'mint__titulo1_1'}>{popUpUniversal.mensaje}</h2>\n                </div>\n                <div className='mint_div_subtitle2'>\n                  <h4 className='mint__titulo2_1'>{popUpUniversal.mensaje2}</h4>\n                </div>\n              </div>\n      </PopUpLoading>\n\n      <img src={mancha1} className=\"mancha1\" alt=\"\" />\n      <img src={mancha2} className=\"mancha2\" alt=\"\" />\n      <div className='mint__container'>\n        <div className='mint__content'>\n\n          <h1 className='titulo__mint'> PRESALE MINT PRICE 0.15 ETH </h1>\n          <h2 className='sub__titulo1'>MINT PRICE 0.2 ETH</h2>\n          <h3 className='sub__titulo'>(10,000 AVAILABLE)</h3>\n\n          <p className='parrafo__mint'>10,000 Out of the Flame Club was created to bring financial freedom. Thanks to the rarity of each NFTs you\n            will be able to get rewards in the Oubita Exchange and his metaverse space.\n          </p>\n          <p className='parrafo__mint'>Developed thought Polygon network blockchain and create to have governance at Oubita\n            Exchange, Its personal an referable. Meet Oubita Exchange and Register to take advantage of your rewards\n          </p>\n\n          {/* <button className=' --boton__mint'>\n            <a className='link__boton' target={'_blank'} href=\"https://www.oubita.com/#/\">GO TO OUBITA.COM</a>\n          </button> */}\n\n          <MintButton className=\"botton\" datos={coins} stylesCss={\"menuComponetContenedorMint\"} \n              caso={true} popup = {setPopUpUniversal} closepopup = {closePop} functions = {functions}\n              buttonPrice = {buttonPrice} popUpUniversal={popUpUniversal}/>\n\n\n        </div>\n\n        <div className='mint__img'>\n          <img className='img' src={banner} alt=\"banner\" />\n        </div>\n      </div>\n\n\n      <div className='mint__footer'>\n        <div className='footer__content'>\n\n          <div className='footer__title'>\n            <h1>LAUNCH OF 10,000 NFTS</h1>\n          </div>\n\n          <div className='--medio-border'></div>\n\n          <div className='footer__copy'>\n            <h4>PRESALE AT 0,15 ETH </h4>\n            <h4>SET PRICE 0,2 ETH</h4>\n            <h4>NETWORK: POLYGON</h4>\n          </div>\n        </div>\n\n        <div className='footer__logo '>\n          <img className='image' src={iconFooter} alt=\"\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Mint\n"],"names":["coinState","name","buttonValueState","value","datos","stylesCss","caso","popup","closepopup","functions","buttonPrice","popUpUniversal","useState","openMenu","setOpenMenu","buttonName","setButtonName","buttonValue","setButtonValue","blockchain","useSelector","store","prices","priceETH","priceMatic","handleMenu","i","className","onClick","account","minter","bool","mensaje","allowance","map","e","price","content","b","y","target","props","trigger","children","coins","buttonPriceState","id","navigate","useNavigate","mensaje2","setPopUpUniversal","setButtonPrice","NFT","oracle","contract","setContract","numberMinted","whitelist","buttonData","setButtonData","precio","setPrice","fetchingCoin","_contract","contractAddress","ethers","window","ethereum","Provider","getSigner","signer","ContratoNFT","_NftContract","axios","fetched","counter","then","resp","numberOfNFTMinted","parseInt","onlyWhitelisted","data","eth","closePop","setTimeout","nextPage","_spender","_account","contratoTok","Number","_hex","toLocaleString","useGrouping","approve","_option","txA","wait","contracNFT","tx1","tx2","options1","from","mint","tx","toString","options2","options3","code","opcion","acc","useEffect","eth_price","result_matic","result","final_result","price_Matic","Decimal","dividedBy","toFixed","button","interval","setInterval","clearInterval","settrigger","src","popUpImg","mancha1","alt","mancha2","banner","iconFooter"],"sourceRoot":""}
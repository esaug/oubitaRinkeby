{"version":3,"file":"static/js/945.c53e8a0c.chunk.js","mappings":"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","sources":["componets/MintButton.jsx","componets/popUps/popUpLoading.jsx","componets/Mint.jsx"],"sourcesContent":["import { useState } from 'react';\nimport {ReactComponent as Arrow} from '../assets/arrow.svg'\nimport store from '../redux/store'\nimport { useSelector} from 'react-redux'\nimport { motion } from 'framer-motion'\n\nexport const coinState = {\n    name : 'ETH',\n\n}\n\nconst buttonValueState = {\n    value: 'ETH',\n}\n\nconst MintButton = ({datos,stylesCss,caso, popup, closepopup,functions, buttonPrice, popUpUniversal, whiteWF}) => {\n\n    const [openMenu, setOpenMenu] = useState(false);\n    const [buttonName, setButtonName] = useState(coinState)\n    const [buttonValue, setButtonValue] = useState(buttonValueState)\n    const [mintActive, setMintActive] = useState(false)\n    \n    const blockchain = useSelector((store)=> store.blockchain)\n\n    if(blockchain.account){\n        const activar = blockchain.contracNFT.activar().then((resp)=>{\n            setMintActive(resp)\n        })\n    }\n\n    const prices = [buttonPrice.priceETH, buttonPrice.priceMatic]\n\n    const handleMenu = (i)=> {\n        setOpenMenu(i)\n        if (openMenu === i )setOpenMenu(false)\n    }\n\n\n    return ( <>\n    <div className=\"botones_mint\">\n            <motion.button \n            className='boton --boton__mint --botonNFT'\n            whileHover={{\n                scale: [null, 1.08,1,1.03],\n                transition: { duration: .6 },\n            }}\n            whileTap={{ scale: 0.95 }}\n            onClick={()=>{  \n                if(blockchain.account){\n                    if(mintActive == false){\n                \n                        popup({\n                            bool: true,\n                            mensaje: 'Mint OFF',\n                            mensaje2: 'Check our social networks, we will post the hour of activation'\n                        })\n                        closepopup()\n\n                    }else if(mintActive == false && blockchain.account){\n                \n                    popup({\n                        bool: true,\n                        mensaje: 'Mint OFF',\n                        mensaje2: 'Check our social networks, we will post the hour of activation'\n                    })\n                    closepopup()\n                    }\n                    else{\n                    \n                        if(blockchain.account && buttonValue.value == 'MATIC'){\n                    \n                    functions.minter(1, blockchain.account)\n                    popup({\n                        bool: true,\n                        mensaje: 'LOADING...'\n                    })\n                        }else if(blockchain.account && buttonValue.value == 'ETH'){\n                \n                    functions.allowance(blockchain.account)\n                    popup({\n                        bool: true,\n                        mensaje: 'LOADING...'\n                    })\n                        }\n                    }\n                }else{\n                    popup({\n                        bool: true,\n                        mensaje: 'Connect your Metamask',\n                        mensaje2: 'Maybe you are on the wrong network'\n                    })\n                    closepopup()\n                }\n                \n            }}\n            >MINT NFT</motion.button>\n            {caso ? datos.map((e,i)=>{\n            return (    \n                <div key={i} className={stylesCss} >\n                    <motion.div\n                        whileHover={openMenu!== i &&{\n                        scale: [null, 1.08,1,1.03],\n                        transition: {type:'spring',stiffness: 100 },\n                    }} \n                    className={openMenu !==i ? \"menuComponet__header --borderRadio\" : 'menuComponet__header '} onClick={()=>{handleMenu(i)}}>\n                        <div className='menuComponet__title'> {buttonName.price}{buttonName.name}</div>\n                        {popUpUniversal.bool == false ? (   \n                                <div className={openMenu !==i  ? \" menuComponet__arrow --arrow-down\" : 'menuComponet__arrow'}><Arrow/></div>\n                        \n                        ) : ('')}\n                    </motion.div>\n                    <div className={openMenu ===i ? 'menuComponet__body --active ' : 'menuComponet__body --disable'}>\n                        {e.content.map((b,y)=><button key={y} value={b} className='button_mint'onClick={(e)=>{\n                            if(e.target.value == 'ETH'){\n                                \n                                setButtonName({\n                                    name:' ETH ',\n                                    price : buttonPrice.priceETH\n                                })\n                                setButtonValue({\n                                    value: 'ETH',\n                                })\n                                setOpenMenu(false)\n                            }else {\n                                setButtonName({\n                                    name:' MATIC ',\n                                    price:buttonPrice.priceMatic\n                                })\n                                setButtonValue({\n                                    value:'MATIC',\n                                })\n                                setOpenMenu(false)\n                            } \n                        }} > {prices[y]} {b}</button>)}\n                    </div>\n                </div>\n            )\n        })\n        :\n        datos.map((e,i)=>{\n            return (\n                <div key={i} className={stylesCss} >\n                    <div className='menuComponet__header' onClick={()=>{handleMenu(i)}}>\n                        <div className='menuComponet__title'>{e.name}</div>\n                        <div className={openMenu !==i ? \" menuComponet__arrow --arrow-down\" : 'menuComponet__arrow'}><Arrow/></div>\n                    </div>\n                    <div className={openMenu ===i ? 'menuComponet__body --active ' : 'menuComponet__body --disable'}>\n                        <p className='menuComponet__body__text'>{e.content}</p>\n                    </div>\n                </div>\n            )\n        })\n        }\n        </div>\n        </> );\n}\n\nexport default MintButton;","import React from 'react'\n\nfunction PopUpLoading (props)  {\n\n\n\nreturn (props.trigger) ? (\n        <div className='mint_popup'>\n            <div className='mint_popup_innner'>\n                \n                {props.children}\n            </div>\n        </div>\n        \n        ) : \"\";\n    \n}\n\nexport default PopUpLoading\n","import banner from '../assets/png/nfta-banner.png'\nimport iconFooter from '../assets/gif/Fuego-en-movimiento-small-compri.gif'\nimport mancha1 from \"../assets/png/capa1.png\"\nimport mancha2 from \"../assets/png/capa2.png\"\nimport MenuOpciones1 from './MenuOpciones1'\nimport popUpImg from \"../assets/png/popUp.png\"\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ContractFactory, ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport { useNavigate } from \"react-router-dom\";\nimport MintButton from './MintButton'\nimport ContratoNFT from'../contracts/abi.json'\nimport axios from 'axios'\nimport Decimal from 'decimal.js-light'\n\n\nimport PopUpLoading from './popUps/popUpLoading'\nimport { motion } from 'framer-motion'\nimport { useRef } from 'react'\n\nconst coins = [\n  {\n    name: 'ETH',\n    content : [\n      `ETH`,\n      `MATIC`,\n    ]\n  }\n]\n\nconst menu = [\n  {\n    name: 'ETH',\n    content : [\n      `ETH`,\n      `MATIC`,\n    ]\n  }\n]\n\nconst buttonPriceState = {\n  priceETH:'',\n  priceMatic:'',\n}\n\n\n\nconst Mint = ({ id }) => {\n\n  let popupState= {\n    bool: false,\n    mensaje: '',\n    mensaje2: ''\n  }\n\n  const contractState = {\n    NFT: null,\n    oracle: null\n  }\n\n  let buttonDataState = {\n    priceMatic: null,\n    numberMinted: null,\n    whitelist: null,\n    supplySpecial: null\n  }\n\n  let precioToken ={\n    precio: null\n  }\n\n  let whitelistState = {\n    whitelist: null\n  }\n\n  let supplySpecialState = {\n    supply : null\n  }\n\n  let ownerState = {\n    _owner: null\n  }\n\n  let navigate = useNavigate()\n  \n  const [popUpUniversal, setPopUpUniversal] = useState(popupState)\n  const [buttonPrice, setButtonPrice] = useState(buttonPriceState)\n  const [contract, setContract] = useState(contractState)\n  const [buttonData, setButtonData] = useState(buttonDataState)\n  const [price, setPrice] = useState(precioToken)\n  const [wList, setWList] = useState(whitelistState)\n  const [supplySpecial, setSupplySpecial] = useState(supplySpecialState)\n  const [mint, setMint] = useState(false)\n  const [owner, setOwner] = useState(ownerState)\n  const [whitelistActive, setWhitelistActive] = useState(false)\n  let isWhite = false \n\n  const blockchain = useSelector((store)=> store.blockchain)\n  const whiteL = useSelector((store)=> store.whiteL)\n  \n\n  const fetchingCoin = async(_contract)=>{\n\n    const contractAddress = '0xa49f0447D6b06b7F343bDBB4aF7c7A49a0d5B198'\n    const Provider = await new ethers.providers.Web3Provider(window.ethereum)\n    const signer = await Provider.getSigner()\n    const _NftContract = await new ethers.Contract(contractAddress, ContratoNFT, signer)\n\n    const tx01 = await _NftContract.activar()\n    const tx02 = await _NftContract.onlyWhitelisted()\n\n    const fetched = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=matic-network&vs_currencies=eth')\n    \n    const txCounter = _NftContract.counter().then((resp)=>{\n      const numberOfNFTMinted = parseInt(resp)\n    \n      const txWw = _NftContract.specialSaleSuply().then((resp)=>{\n        setSupplySpecial({\n          supply: parseInt(resp._hex)\n        })\n      })\n\n      const txWhitelist = _NftContract.onlyWhitelisted()\n      .then((resp)=>{\n        setButtonData({\n          priceMatic: fetched.data['matic-network'].eth,\n          numberMinted: numberOfNFTMinted,\n          whitelist: resp,\n          supplySpecial: txWw\n          })\n        })\n\n      })   \n\n    setContract({\n      NFT:_NftContract\n    })\n\n    setMint(tx01)\n    setWhitelistActive(tx02)\n\n    const txXD = _NftContract.Whitelist_AllUsers().then((resp)=>{\n      setWList({\n        whitelist:resp\n      })\n      \n    })\n\n    const txOw = _NftContract.owner().then((resp)=>{\n      setOwner(resp)\n    })\n    \n  }\n\n  // Close Popup\n\n  const closePop = ()=>{\n    setTimeout(()=>{\n      setPopUpUniversal({\n        bool: false,\n        mensaje: ''\n      })\n    }, 1000 * 5)\n  }\n\n  const nextPage = ()=>{\n    setTimeout(()=>{\n      navigate(\"/profile\")\n    }, 1000 * 5)\n  }\n\n\n// CONFIRM WALLET IN WHITELIST\n\nconst confirmWallet = (_list, _account)=>{\n\n  if(_list){\n        if(_account.toLowerCase() == owner.toLowerCase()){\n            isWhite = true\n            console.log('Es el owner')\n        }else{\n          _list.forEach(element => {\n            if(element.toLowerCase() == _account){\n              console.log('WHITE')\n              isWhite = true\n            }\n          });\n        }\n      \n  }else {console.log('NULL')} \n  }\n\n\n  // BLOCKCHAIN \n\n  const _spender = '0xa49f0447D6b06b7F343bDBB4aF7c7A49a0d5B198'\n  const _amount = '1000000000000000000000000'\n\n\nconst allowance = async (_account)=>{\n  \n  const taxB = await blockchain.contratoTok.allowance(_account, _spender)\n  .then((resp)=>{\n\n    const respuesta = Number(resp._hex).toLocaleString('fullwide', { useGrouping: false })\n\n    const options4 = {\n    from: _account,\n    gasLimit: 157845\n    }\n\n    if(respuesta < 30000000000000000000){\n      const minteo = ()=>{\n      const txC =  approve( 2, _account, options4)\n      }\n      minteo()\n      }else{\n      minter(2, _account)  \n      } \n  })\n\n    \n}\n\nconst approve = async ( _option, _account)=>{\n\n  try {\n    const txA = await blockchain. contratoTok.approve( _spender, _amount)\n    await txA.wait().then((resp)=>{\n    \n      if(txA){\n        setPopUpUniversal({\n          bool: false,\n          mensaje: ''\n        })\n        \n        minter( 2, _account)\n        \n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'LOADING...'\n        })\n      }\n    }\n  ) \n  } catch (error) {\n    setPopUpUniversal({\n      bool: true,\n      mensaje: 'The transaction has been cancel'\n    })\n    closePop()\n  }\n}\n\n// SET BOTON PRICE \n\nconst button = async ()=>{\n  \n  let{numberMinted} = buttonData\n  let {priceMatic} = buttonData\n  let {whitelist} = buttonData\n  let price_Matic = Number(priceMatic)\n  let eth_price, result_matic, result, final_result\n  let {supply} = supplySpecial\n  \n  if(whitelist == true){\n    \n    if(price_Matic == 0 ){\n      \n    } else {\n      eth_price = new Decimal(0.15)\n      result_matic = new Decimal(price_Matic)\n      result = eth_price.dividedBy(result_matic).toString()\n      final_result = Number(result).toFixed(2)\n      \n\n      setButtonPrice({\n        priceETH : '0,15',\n        priceMatic: final_result\n      })\n\n      setPrice({\n        precio: final_result * 10 ** 18\n      })\n    }\n  }else if (whitelist == false && numberMinted < supply ) {\n    \n    if(price_Matic == 0 ){\n      \n    } else {\n      eth_price = new Decimal(0.15)\n      result_matic = new Decimal(price_Matic)\n      result = eth_price.dividedBy(result_matic).toString()\n      final_result = Number(result).toFixed(2)\n      \n\n      setButtonPrice({\n        priceETH : '0,15',\n        priceMatic: final_result\n      })\n\n      setPrice({\n        precio: final_result * 10 ** 18\n      })\n    }\n  } else if (whitelist == false && numberMinted >= supply) {\n    \n    if(price_Matic == 0 ){\n      \n    } else {\n      eth_price = new Decimal(0.2)\n      result_matic = new Decimal(price_Matic)\n      result = eth_price.dividedBy(result_matic).toString()\n      final_result = Number(result).toFixed(2)\n\n\n      setButtonPrice({\n        priceETH : '0,2',\n        priceMatic: final_result  \n      })\n\n      setPrice({\n        precio: final_result * 10 ** 18\n      })\n\n    }\n  \n  }else {\n    \n  }\n}\n\n\n\n// MINTER FUNCTION\n\nconst minter = async(_option,_account)=>{\n\n  let wallets = wList['whitelist']\n  const tx0 = await blockchain.contracNFT.activar()\n  const tx1 = await blockchain.contracNFT.onlyWhitelisted()\n  const tx2 = await blockchain.contracNFT.counter()\n  const txSs = await blockchain.contracNFT.specialSaleSuply()\n  const counter = parseInt(tx2, 18)\n\n  \n  if(tx1 == true){\n    confirmWallet(wallets, _account)\n  } \n  \n  let prueb\n\n  const optionToken = {\n    value: 0\n  }\n\n  if(tx0 == false){\n    setPopUpUniversal({\n      bool: true,\n      mensaje: 'Mint OFF',\n      mensaje2: 'Check our social networks, we will post the hour of activation'\n    })\n    closePop()\n  }else{\n    try{\n      if(tx1 == true){\n      \n        if(isWhite == true && _option == 1 ){\n          \n          const options1 = {\n            from: _account,\n            value: \"200000000000000\"\n          }         \n          const tx = await blockchain.contracNFT.Mint(_option, 1, \"200000000000000\", options1)\n          await tx.wait().then((resp)=>{\n            if(tx){    \n                  \n              setPopUpUniversal({\n                bool: true,\n                mensaje: 'Minted!',\n                mensaje2: 'your NFT has been minted'\n              })\n              closePop()\n              nextPage()\n            }\n          })\n        }else if(isWhite == true && _option == 2){\n    \n            prueb = 200000000000000\n            const tx = await blockchain.contracNFT.Mint(_option, 1, \"200000000000000\", optionToken)\n            await tx.wait().then((resp)=>{\n              \n    \n              if(tx){\n                \n                setPopUpUniversal({\n                  bool: true,\n                  mensaje: 'Minted!',\n                  mensaje2: 'your NFT has been minted'\n                })\n                  closePop()\n                  nextPage()\n              }\n            })\n        }else{\n          setPopUpUniversal({\n            bool: true,\n            mensaje: 'You are not in the Whitelist'\n          })\n          closePop()\n        }      \n      }else{\n        if(tx1 == false && _option == 1 && counter < parseInt(txSs._hex)){  \n        \n          const options2 = {\n          from: _account,\n          value: \"1500000000000000\"\n        }\n          const tx = await blockchain.contracNFT.Mint(_option, 1, \"1500000000000000\", options2)\n          await tx.wait().then((resp)=>{\n            if(tx){     \n              setPopUpUniversal({\n                bool: true,\n                mensaje: 'Minted!',\n                mensaje2: 'your NFT has been minted'\n              })\n              closePop()\n              nextPage()\n            }\n        }) \n        }else if(tx1 == false && _option == 2 && counter < parseInt(txSs._hex)){\n  \n          prueb = 1500000000000000\n          const tx = await blockchain.contracNFT.Mint(_option , 1, prueb.toString(), optionToken)\n          await tx.wait().then((resp)=>{     \n            if(tx){     \n              setPopUpUniversal({\n                bool: true,\n                mensaje: 'Minted!',\n                mensaje2: 'your NFT has been minted'\n              })\n                closePop()\n                nextPage()\n            }\n          })    \n        }else if(counter >= parseInt(txSs._hex) && _option == 1 ){\n          \n          const options3 = {\n            from: _account,\n            value: \"2000000000000000\"\n          }\n          const tx = await blockchain.contracNFT.Mint(_option, 1, \"2000000000000000\", options3 )\n          await tx.wait().then((resp)=>{\n            if(tx){\n              \n              setPopUpUniversal({\n                bool: true,\n                mensaje: 'Minted!',\n                mensaje2: 'your NFT has been minted'\n              })\n              closePop()\n              nextPage()\n            }\n          }) \n        }else if(counter >= parseInt(txSs._hex) && _option == 2){\n          \n          prueb = 2000000000000000\n          const tx10 = await blockchain.contracNFT.Mint(_option, 1, prueb.toString(), optionToken)\n          await tx10.wait().then((resp)=>{\n            if(tx10){          \n              setPopUpUniversal({\n                bool: true,\n                mensaje: 'Minted!',\n                mensaje2: 'your NFT has been minted'\n              })\n              closePop()\n              nextPage()\n            }\n          })\n        }\n      }\n    }catch (error){\n      if(error.code == 4001){\n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'The transaction has been cancel'\n        })\n        closePop()\n  \n      }else if(error.code == 'INSUFFICIENT_FUNDS'){\n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'Insufficient Funds'\n        })\n        closePop()\n      }else if(error.code == -32603){\n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'Insufficiente Balance',\n      \n        })\n        closePop() \n      }else if(error.code == \"UNPREDICTABLE_GAS_LIMIT\"){\n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'Insufficiente Balance',\n      \n        })\n        closePop() \n      }else if( error.code == \"TRANSACTION_REPLACED\"){\n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'Your NFT has been minted',\n      \n        })\n        closePop()\n      }\n      else{ \n        setPopUpUniversal({\n          bool: true,\n          mensaje: 'Connect your Metamask',\n      \n        })\n        closePop() \n        console.log(error)  \n      }\n    }\n  }\n}\n\nconst functions = {\n  minter : (opcion, acc)=>minter(opcion, acc),\n  allowance: (acc)=>allowance(acc)\n}\n\nuseEffect(()=>{\n  button()\n}, [buttonData.numberMinted])\n\n\nconst comprobando = async()=>{\n  \n  const networkId = await window.ethereum.request({\n    method: \"net_version\"\n    })\n  \n  if(networkId != 80001){\n  \n  }else{\n    \n    fetchingCoin(contract)\n  }\n    \n}\n\nuseEffect(()=>{    \n\n    comprobando()\n  const interval = setInterval(()=>{\n    comprobando()\n  }, 5000)\n\n  return()=>clearInterval(interval)\n}, []) \n\nconst contentVatiants = {\n  hidden: {\n    translateX:'-100%',\n    opacity: 0,\n    \n  },\n  visible: {\n    translateX:'0%',\n    opacity: 1,\n    transition: {\n      duration: 2,\n    }\n  },\n}\nconst imagenVariants = {\n  hidden: {\n    translateX: '100%',\n    opacity: 0,\n  },\n  visible: {\n    // x: 0,\n    opacity: 1,\n    translateX: '0%',\n    transition: {\n      duration: 2,\n    }\n  },\n}\nconst footerVariants = {\n  hidden: {\n    translateY: '100%',\n    opacity:0,\n  },\n  visible: {\n    translateY: 0,\n    opacity: 1,\n    transition: {\n      duration:1,\n    }\n  },\n}\n\nconst scrollRef = useRef(null)\n \n\n\n\n  return (\n    <div className='mint' id={id}>\n      <PopUpLoading trigger={popUpUniversal.bool} settrigger={setPopUpUniversal} >\n              <div className='mint_div'>\n                <div className='mint_div_img'>\n                  <img className='mint_img' src={popUpImg}/>\n                </div>\n                <div className='mint_div_subtitle1'>\n                  <h2 className={popUpUniversal.mensaje == 'The transaction has been cancel' ? 'mint__titulo2' : popUpUniversal.mensaje == 'Insufficient Funds'? 'mint__titulo3':  popUpUniversal.mensaje == 'Connect your Metamask'? 'mint__titulo4': 'mint__titulo1_1'}>{popUpUniversal.mensaje}</h2>\n                </div>\n                <div className='mint_div_subtitle2'>\n                  <h4 className='mint__titulo2_1'>{popUpUniversal.mensaje2}</h4>\n                </div>\n              </div>\n      </PopUpLoading>\n\n      <motion.div className='mint' id={id}\n      ref={scrollRef}\n      layout\n    >\n      <img src={mancha1} className=\"mancha1\" alt=\"\" />\n      <img src={mancha2} className=\"mancha2\" alt=\"\" />\n      \n      <div className='mint__container' >\n        <motion.div className='mint__content'\n          variants={contentVatiants}\n          initial='hidden'\n          whileInView='visible'\n          viewport={{ root: scrollRef,once:true }}\n        >\n\n          <h1 className='titulo__mint'> PRESALE MINT PRICE 0.15 ETH </h1>\n          <h2 className='sub__titulo1'>MINT PRICE 0.2 ETH</h2>\n          <h3 className='sub__titulo'>(10,000 AVAILABLE)</h3>\n\n          <p className='parrafo__mint'>10,000 Out of the Flame Club was created to bring financial freedom. Thanks to the rarity of each NFTs you\n            will be able to get rewards in the Oubita Exchange and his metaverse space.\n          </p>\n          <p className='parrafo__mint'>Developed thought Polygon network blockchain and create to have governance at Oubita\n            Exchange, Its personal an referable. Meet Oubita Exchange and Register to take advantage of your rewards\n          </p>\n\n          {/* <button className=' --boton__mint'>\n            <a className='link__boton' target={'_blank'} href=\"https://www.oubita.com/#/\">GO TO OUBITA.COM</a>\n          </button> */}\n\n          <MintButton className=\"botton\" datos={coins} stylesCss={\"menuComponetContenedorMint\"} \n              caso={true} popup = {setPopUpUniversal} closepopup = {closePop} functions = {functions}\n              buttonPrice = {buttonPrice} popUpUniversal={popUpUniversal}/>\n\n          <div className=\"botones_mint\">\n            \n          </div>\n\n        </motion.div>\n\n        <motion.div className='mint__img'\n          variants={imagenVariants}\n          initial='hidden'\n          whileInView='visible'\n          viewport={{ root: scrollRef,once:true }}\n        >\n          <img className='img' src={banner} alt=\"banner\" />\n        </motion.div>\n      </div>\n\n      <motion.div className='mint__footer'\n        variants={footerVariants}\n        initial= 'hidden'\n        whileInView= 'visible'\n        viewport={{ once:true, margin:'100px' }}\n      >\n        <div className='footer__content'>\n\n          <div className='footer__title'>\n            <h1>LAUNCH OF 10,000 NFTS</h1>\n          </div>\n\n          <div className='--medio-border'></div>\n\n          <div className='footer__copy'>\n            <h4>PRESALE AT 0,15 ETH </h4>\n            <h4>SET PRICE 0,2 ETH</h4>\n            <h4>NETWORK: POLYGON</h4>\n          </div>\n        </div>\n\n        <div className='footer__logo '>\n          <img className='image' src={iconFooter} alt=\"\" />\n        </div>\n      </motion.div>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default Mint\n"],"names":["coinState","name","buttonValueState","value","datos","stylesCss","caso","popup","closepopup","functions","buttonPrice","popUpUniversal","whiteWF","useState","openMenu","setOpenMenu","buttonName","setButtonName","buttonValue","setButtonValue","mintActive","setMintActive","blockchain","useSelector","store","account","contracNFT","activar","then","resp","prices","priceETH","priceMatic","handleMenu","i","className","motion","whileHover","scale","transition","duration","whileTap","onClick","bool","mensaje","mensaje2","minter","allowance","map","e","type","stiffness","price","content","b","y","target","props","trigger","children","coins","buttonPriceState","id","navigate","useNavigate","setPopUpUniversal","setButtonPrice","NFT","oracle","contract","setContract","numberMinted","whitelist","supplySpecial","buttonData","setButtonData","precio","setPrice","wList","setWList","supply","setSupplySpecial","setMint","_owner","owner","setOwner","setWhitelistActive","isWhite","fetchingCoin","whiteL","_contract","contractAddress","ethers","window","ethereum","Provider","getSigner","signer","ContratoNFT","_NftContract","tx01","onlyWhitelisted","tx02","axios","fetched","counter","numberOfNFTMinted","parseInt","txWw","specialSaleSuply","_hex","data","eth","Whitelist_AllUsers","closePop","setTimeout","nextPage","confirmWallet","_list","_account","toLowerCase","console","log","forEach","element","_spender","contratoTok","Number","toLocaleString","useGrouping","approve","from","gasLimit","_option","txA","wait","button","price_Matic","eth_price","Decimal","result_matic","result","dividedBy","toString","final_result","toFixed","wallets","tx0","tx1","tx2","txSs","optionToken","options1","Mint","tx","prueb","options2","options3","tx10","code","opcion","acc","useEffect","comprobando","request","method","interval","setInterval","clearInterval","scrollRef","useRef","settrigger","src","popUpImg","ref","layout","mancha1","alt","mancha2","variants","hidden","translateX","opacity","visible","initial","whileInView","viewport","root","once","banner","translateY","margin","iconFooter"],"sourceRoot":""}